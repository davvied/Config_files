#+title: Qtile
#+PROPERTY:

* Table of content :toc:
- [[#qtile-config][Qtile Config]]
  - [[#imports][Imports]]
  - [[#variables][Variables]]
  - [[#keys][Keys]]
  - [[#groups][Groups]]
  - [[#layouts][Layouts]]
  - [[#screens][Screens]]
  - [[#mouse-input][Mouse input]]
  - [[#rules][Rules]]
  -   [[#auto-start][Auto start]]
  - [[#end-of-config-files][End of Config files]]

* Qtile Config
** Imports
#+BEGIN_SRC python :tangle config.py
# -*- coding: utf-8 -*-
import os
import re
import subprocess
from libqtile import bar, layout, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from typing import List  # noqa: F401

#+END_SRC
** Variables
#+BEGIN_SRC python :tangle config.py
mod = "mod4"
Terminal = guess_terminal()
Web_Browser = "firefox"
EmailClient = "thunderbird"
App_Launcher = "rofi -show-icons -show drun"
File_Manager = "pcmanfm-qt"

#+END_SRC
** Keys
#+BEGIN_SRC python :tangle config.py
keys = [
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),

    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),

    # Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    # Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    # Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    # Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    Key([mod, "control"], "h", lazy.layout.grow(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.shrink(), desc="Grow window to the left"),

    Key([mod, "shift"], "Return", lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),

    Key([mod], "Return", lazy.spawn(Terminal), desc="Launch terminal"),
    Key([mod], "t", lazy.spawn(Terminal), desc="Launch terminal"),

    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "shift"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "shift"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod, "mod1"], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    Key([mod], "r", lazy.spawn(App_Launcher), desc="Spawn rofi app launcher"),
    Key([mod], "b", lazy.spawn(Web_Browser), desc="Spawn web browser"),
    Key([mod], "e", lazy.spawn(File_Manager), desc="Spawn file manager"),
]
#+END_SRC
** Groups
#+BEGIN_SRC python :tangle config.py
groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

#+END_SRC

** Layouts
*** Layout_theme
#+BEGIN_SRC python :tangle config.py
layout_theme = {"border_width": 2,
                "margin": 8,
                "border_focus": "e1acff",
                "border_normal": "1D2330"
                }
#+END_SRC

*** Layout configurations
#+BEGIN_SRC python :tangle config.py
layouts = [
    layout.MonadTall(ratio=0.6,
                     **layout_theme),
    layout.Max(**layout_theme),
    # layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"], border_width=4),
    layout.TreeTab(
         font = "Ubuntu",
         fontsize = 10,
         sections = ["FIRST", "SECOND", "THIRD", "FOURTH"],
         section_fontsize = 10,
         border_width = 2,
         bg_color = "1c1f24",
         active_bg = "c678dd",
         active_fg = "000000",
         inactive_bg = "a9a1e1",
         inactive_fg = "1c1f24",
         padding_left = 0,
         padding_x = 0,
         padding_y = 5,
         section_top = 10,
         section_bottom = 20,
         level_shift = 8,
         vspace = 3,
         panel_width = 200
         ),
    layout.Floating(**layout_theme)
]

#+END_SRC

** Screens
*** Colors
#+BEGIN_SRC python :tangle config.py
colors = [["#282c34", "#282c34"],
          ["#1c1f24", "#1c1f24"],
          ["#dfdfdf", "#dfdfdf"],
          ["#ff6c6b", "#ff6c6b"],
          ["#98be65", "#98be65"],
          ["#da8548", "#da8548"],
          ["#51afef", "#51afef"],
          ["#c678dd", "#c678dd"],
          ["#46d9ff", "#46d9ff"],
          ["#a9a1e1", "#a9a1e1"],],


#+END_SRC
*** prompt layout
#+BEGIN_SRC python :tangle config.py
# prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())

#+END_SRC
*** Widget default configs
#+BEGIN_SRC python :tangle config.py
widget_defaults = dict(
    font="sans",
    fontsize=12,
    padding=3,
    # background=colors[2],
)
extension_defaults = widget_defaults.copy()

#+END_SRC
*** Screen widget layout
#+BEGIN_SRC python :tangle config.py
screens = [
    Screen(
        top=bar.Bar(
            [
                widget.CurrentLayout(),
                widget.AGroupBox(),
                widget.Prompt(),
                widget.WindowName(),
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                widget.Clock(format="%Y-%m-%d %a %I:%M %p"),
                widget.Systray(),
            ],
            24,
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
        bottom=bar.Bar(
            [
                widget.GroupBox(),
            ],
            24,
        ),
    ),
]

#+END_SRC
** Mouse input
#+BEGIN_SRC python :tangle config.py
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

#+END_SRC
** Rules
#+BEGIN_SRC python :tangle config.py
dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

#+END_SRC
**   Auto start
*** auto start once
#+BEGIN_SRC python :tangle config.py

@hook.subscribe.startup_once
def start_once():
# def autostart():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.local/Config_files/qtile/autostart.sh'])

#+END_SRC
*** auto start once file
#+BEGIN_SRC sh :tangle autostart.sh
#!/usr/bin/env sh

/usr/bin/emacs --daemon &

### UNCOMMENT ONLY ONE OF THE FOLLOWING THREE OPTIONS! ###
# 1. Uncomment to restore last saved wallpaper
# xargs xwallpaper --stretch < ~/.cache/wall &
# 2. Uncomment to set a random wallpaper on login
find /usr/share/backgrounds/ -type f | shuf -n 1 | xargs xwallpaper --stretch &
# 3. Uncomment to set wallpaper with nitrogen
# nitrogen --restore &
#+END_SRC
** End of Config files
#+BEGIN_SRC python :tangle config.py

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"

#+END_SRC

